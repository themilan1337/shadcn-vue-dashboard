<template>
  <div class="space-y-6">
    <!-- Header Section -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold tracking-tight">Dashboard</h1>
        <p class="text-muted-foreground">Monitor your servers and alerts in real-time</p>
      </div>
      <Button @click="refreshStats" :disabled="isLoading" class="gap-2">
        <RefreshCw :class="{ 'animate-spin': isLoading }" :size="16" />
        Refresh
      </Button>
    </div>

    <!-- Stats Overview -->
    <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      <Card>
        <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle class="text-sm font-medium">Total Servers</CardTitle>
          <Server :size="16" class="text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div class="text-2xl font-bold">{{ stats.totalServers }}</div>
          <p class="text-xs text-muted-foreground">{{ onlineServers }} online</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle class="text-sm font-medium">Active Alerts</CardTitle>
          <AlertTriangle :size="16" class="text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div class="text-2xl font-bold text-destructive">{{ stats.activeAlerts }}</div>
          <p class="text-xs text-muted-foreground">{{ criticalAlerts }} critical</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle class="text-sm font-medium">System Uptime</CardTitle>
          <Clock :size="16" class="text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div class="text-2xl font-bold">{{ formatUptime(stats.uptime) }}</div>
          <p class="text-xs text-muted-foreground">99.9% availability</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle class="text-sm font-medium">Telegram Groups</CardTitle>
          <MessageSquare :size="16" class="text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div class="text-2xl font-bold">{{ stats.telegramGroups }}</div>
          <p class="text-xs text-muted-foreground">Connected</p>
        </CardContent>
      </Card>
    </div>

    <!-- Server Status Grid -->
    <div class="grid gap-6 lg:grid-cols-2">
      <!-- Servers List -->
      <Card>
        <CardHeader>
          <CardTitle class="flex items-center gap-2">
            <Server :size="20" />
            Server Status
          </CardTitle>
          <CardDescription>Real-time monitoring of your servers</CardDescription>
        </CardHeader>
        <CardContent>
          <div class="space-y-4">
            <div v-for="server in servers" :key="server.id" 
                 class="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer"
                 @click="viewServerDetails(server)">
              <div class="flex items-center gap-3">
                <Badge :variant="getStatusVariant(server.status)" class="w-2 h-2 p-0 rounded-full" />
                <div>
                  <p class="font-medium">{{ server.name }}</p>
                  <p class="text-sm text-muted-foreground">Uptime: {{ server.uptime }}</p>
                </div>
              </div>
              <div class="text-right">
                <div class="flex gap-2 text-sm">
                  <span>CPU: {{ server.cpu }}%</span>
                  <span>RAM: {{ server.memory }}%</span>
                </div>
                <Switch v-model:checked="server.monitoring" @update:checked="toggleServerMonitoring(server)" class="mt-2" />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <!-- Recent Alerts -->
      <Card>
        <CardHeader>
          <div class="flex items-center justify-between">
            <div>
              <CardTitle class="flex items-center gap-2">
                <AlertTriangle :size="20" />
                Recent Alerts
              </CardTitle>
              <CardDescription>Latest system notifications</CardDescription>
            </div>
            <Select v-model="alertFilter">
              <SelectTrigger class="w-32">
                <SelectValue placeholder="Filter" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardHeader>
        <CardContent>
          <div class="space-y-3">
            <div v-for="alert in filteredAlerts" :key="alert.id" 
                 class="flex items-start gap-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer"
                 @click="acknowledgeAlert(alert)">
              <Badge :variant="getSeverityVariant(alert.severity)" class="mt-1" />
              <div class="flex-1">
                <p class="font-medium">{{ alert.message }}</p>
                <p class="text-sm text-muted-foreground">{{ formatTime(alert.timestamp) }}</p>
              </div>
              <div v-if="!alert.resolved" class="w-2 h-2 bg-destructive rounded-full" />
            </div>
          </div>
        </CardContent>
      </Card>
    </div>

    <!-- Charts Section -->
    <div class="grid gap-6 lg:grid-cols-2">
      <Card>
        <CardHeader>
          <CardTitle>Server Performance</CardTitle>
          <CardDescription>CPU and Memory usage over time</CardDescription>
        </CardHeader>
        <CardContent>
          <div class="h-64 flex items-center justify-center border-2 border-dashed border-muted-foreground/25 rounded-lg">
            <div class="text-center text-muted-foreground">
              <TrendingUp :size="48" class="mx-auto mb-2" />
              <p>Performance Chart</p>
              <p class="text-sm">Real-time metrics visualization</p>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Alert Distribution</CardTitle>
          <CardDescription>Breakdown by severity and type</CardDescription>
        </CardHeader>
        <CardContent>
          <div class="h-64 flex items-center justify-center border-2 border-dashed border-muted-foreground/25 rounded-lg">
            <div class="text-center text-muted-foreground">
              <PieChart :size="48" class="mx-auto mb-2" />
              <p>Alert Distribution</p>
              <p class="text-sm">Severity breakdown</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Switch } from '@/components/ui/switch'
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select'
import { 
  Server, 
  AlertTriangle, 
  Clock, 
  MessageSquare, 
  RefreshCw,
  TrendingUp,
  PieChart
} from 'lucide-vue-next'
import { toast } from 'vue-sonner'

// Types
interface ServerData {
  id: string
  name: string
  status: 'online' | 'offline' | 'warning'
  cpu: number
  memory: number
  disk: number
  uptime: string
  lastAlert?: string
  monitoring: boolean
}

interface AlertData {
  id: string
  serverId: string
  type: 'cpu' | 'memory' | 'disk' | 'network'
  severity: 'low' | 'medium' | 'high' | 'critical'
  message: string
  timestamp: Date
  resolved: boolean
}

interface StatsData {
  totalServers: number
  activeAlerts: number
  uptime: number
  telegramGroups: number
}

// Reactive state
const isLoading = ref(false)
const alertFilter = ref('all')

// Mock data
const stats = ref<StatsData>({
  totalServers: 12,
  activeAlerts: 3,
  uptime: 2592000, // 30 days in seconds
  telegramGroups: 5
})

const servers = ref<ServerData[]>([
  {
    id: '1',
    name: 'Web Server 01',
    status: 'online',
    cpu: 45,
    memory: 67,
    disk: 23,
    uptime: '15d 4h 32m',
    monitoring: true
  },
  {
    id: '2',
    name: 'Database Server',
    status: 'warning',
    cpu: 89,
    memory: 78,
    disk: 45,
    uptime: '8d 12h 15m',
    lastAlert: '2 hours ago',
    monitoring: true
  },
  {
    id: '3',
    name: 'API Gateway',
    status: 'online',
    cpu: 23,
    memory: 34,
    disk: 12,
    uptime: '22d 8h 45m',
    monitoring: true
  },
  {
    id: '4',
    name: 'Cache Server',
    status: 'offline',
    cpu: 0,
    memory: 0,
    disk: 67,
    uptime: '0m',
    lastAlert: '5 minutes ago',
    monitoring: false
  }
])

const alerts = ref<AlertData[]>([
  {
    id: '1',
    serverId: '2',
    type: 'cpu',
    severity: 'critical',
    message: 'High CPU usage detected on Database Server',
    timestamp: new Date(Date.now() - 1000 * 60 * 30),
    resolved: false
  },
  {
    id: '2',
    serverId: '4',
    type: 'network',
    severity: 'high',
    message: 'Cache Server is unreachable',
    timestamp: new Date(Date.now() - 1000 * 60 * 5),
    resolved: false
  },
  {
    id: '3',
    serverId: '1',
    type: 'memory',
    severity: 'medium',
    message: 'Memory usage above threshold',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2),
    resolved: true
  }
])

// Computed properties
const onlineServers = computed(() => 
  servers.value.filter(s => s.status === 'online').length
)

const criticalAlerts = computed(() => 
  alerts.value.filter(a => a.severity === 'critical' && !a.resolved).length
)

const filteredAlerts = computed(() => {
  if (alertFilter.value === 'all') return alerts.value
  return alerts.value.filter(alert => alert.severity === alertFilter.value)
})

// Methods
const refreshStats = async () => {
  isLoading.value = true
  // Simulate API call
  await new Promise(resolve => setTimeout(resolve, 1000))
  isLoading.value = false
}

const viewServerDetails = (server: ServerData) => {
  console.log('Viewing details for:', server.name)
}

const acknowledgeAlert = (alert: AlertData) => {
  alert.resolved = true
  stats.value.activeAlerts--
}

const toggleServerMonitoring = (server: ServerData) => {
  console.log(`Monitoring ${server.monitoring ? 'enabled' : 'disabled'} for ${server.name}`)
}

const getStatusVariant = (status: string) => {
  switch (status) {
    case 'online': return 'default'
    case 'warning': return 'secondary'
    case 'offline': return 'destructive'
    default: return 'outline'
  }
}

const getSeverityVariant = (severity: string) => {
  switch (severity) {
    case 'critical': return 'destructive'
    case 'high': return 'destructive'
    case 'medium': return 'secondary'
    case 'low': return 'outline'
    default: return 'outline'
  }
}

const formatUptime = (seconds: number) => {
  const days = Math.floor(seconds / 86400)
  const hours = Math.floor((seconds % 86400) / 3600)
  return `${days}d ${hours}h`
}

const formatTime = (date: Date) => {
  const now = new Date()
  const diff = now.getTime() - date.getTime()
  const minutes = Math.floor(diff / 60000)
  const hours = Math.floor(minutes / 60)
  
  if (hours > 0) return `${hours}h ago`
  return `${minutes}m ago`
}

onMounted(() => {
  // Initialize dashboard data
  console.log('Dashboard mounted')
})
</script>